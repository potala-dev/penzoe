from io import BytesIO
from pathlib import Path

from django.core.files.uploadedfile import SimpleUploadedFile
from PIL import Image

from penzoe.books.tests.factories import BookFactory
from penzoe.discourse.tests.factories import CommentFactory, ThreadFactory
from penzoe.test import TestCase
from penzoe.users.tests.factories import ProfileFactory


class TestUser(TestCase):
    def test_str(self):
        user = self.make_user()
        assert str(user) == user.email
        book = BookFactory(user=user)
        assert user.book_set.latest("id") == book

    def test_get_total_points(self):
        user = self.make_user()
        book = BookFactory(user=user)
        ThreadFactory(user=user, book=book, points=1)
        ThreadFactory(user=user, book=book, points=2)
        threads = user.thread_set.all()

        assert user._get_total_points(threads) == 3

    def test_update_points(self):
        user = self.make_user()
        BookFactory(user=user)
        ThreadFactory(user=user, points=1)
        ThreadFactory(user=user, points=2)
        CommentFactory(user=user, points=1)
        CommentFactory(user=user, points=2)
        user.update_points()

        assert user.points == (1 + (1 + 2) * 2 + (1 + 2) * 5)


def create_profile_pic(size=(500, 500), image_mode="RGB", image_format="PNG"):
    """Return a generated BytestIO containing the image data."""
    data = BytesIO()
    Image.new(image_mode, size).save(data, image_format)
    data.seek(0)
    return data


class TestProfile(TestCase):
    def test_str(self):
        user = self.make_user()
        profile = ProfileFactory(user=user)

        assert str(profile) == f"{profile.user.email} Profile"

    def test_save_profile_pic(self):
        user = self.make_user()
        profile_pic = create_profile_pic()

        assert Image.open(profile_pic).size == (500, 500)

        profile_pic_fn = "test_profile_pic.png"
        user_profile = ProfileFactory(
            user=user,
            profile_pic=SimpleUploadedFile(profile_pic_fn, profile_pic.getvalue()),
        )
        assert user_profile.profile_pic

        assert Image.open(user_profile.profile_pic.path).size == (300, 300)

        # delete the saved profile pic
        profile_pic_path = Path(user_profile.profile_pic.path)
        profile_pic_path.unlink()
